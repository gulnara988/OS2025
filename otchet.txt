Создание программы ,где процесс-родитель и процесс-ребёнок выполняет различные действия

Исходный код программы:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
        pid_t prid, parprid;
        int a = 0, c;
        prid = getpid();
        parprid = getppid();
        printf("До выполнения fork():\n");
        printf("Ид. текущего процесса: %d\n", prid);
        printf("Ид. родительского процесаа  %d\n",parprid);
        printf("начальное значение переменной a: %d", a);
        c = fork();
        if(c<0){
        printf("Ошибка при вызове fork()");
                exit(-1);
        }
        else if (c==0) {
                printf("выполнение дочернегг процесса");
                a = a+1;
                prid = getpid();
                parprid = getppid();
                printf("После выполнения fork():\n");
                printf("Ид. текущего процесса: %d\n", prid);
                printf("Ид. родительского процесаа  %d\n",parprid);
                printf("Значение переменной а: %d",a);
        }
        else{
                printf("Выполнение родительского процесса, порождён процесс с ид.%d",c);
                a = a+1000;
                                prid = getpid();
                parprid = getppid();
                printf("После выполнения fork() для родительского процесса:\n");
                printf("Ид.текущего процесса:%d\nИд. родительского процесса::%d\n", prid,parprid);
                printf("Значение переменной a:%d\n", a);
        }
        return 0;
}

Результат выполнения программы:
До выполнения fork():
Ид. текущего процесса: 13278
Ид. родительского процесаа  13255
начальное значение переменной a: 0Выполнение родительского процесса, порождён процесс с ид.13279После выполнения fork() для родительского процесса:
Ид.текущего процесса:13278
Ид. родительского процесса::13255
Значение переменной a:1000
начальное значение переменной a: 0выполнение дочернегг процессаПосле выполнения fork():
Ид. текущего процесса: 13279
Ид. родительского процесаа  13278
Значение переменной а: 1`	

Выводы:
Переменная а в родительском  и в дочернем независимы друг от друга,так как распалагаются в разном адресном пространстве
Переменные, где хранятся идентификаторы родительского и дочернего процессов также независимы друг от друга
Родительский процесс получает значение 0,возвращаемое системным вызовом fork() идентификатор своего дочернего процесса
Дочерний процесс получает значение 0,возращаемое системным вызовом fork()  
